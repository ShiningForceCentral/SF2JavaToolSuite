/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package com.sfc.sf2.battle.mapterrain.models;

import com.sfc.sf2.battle.mapterrain.LandEffect;
import javax.swing.JComboBox;
import javax.swing.JSpinner;

/**
 *
 * @author TiMMy
 */
public class LandEffectCellEditor extends javax.swing.JPanel {

    private LandEffect landEffect;
    
    /**
     * Creates new form LandEffectCellEditor
     */
    public LandEffectCellEditor() {
        initComponents();
    }

    public JComboBox<String> getComboBox() {
        return comboBox;
    }

    public JSpinner getSpinner() {
        return spinner;
    }

    public LandEffect getLandEffect() {
        return landEffect;
    }

    public void setLandEffect(LandEffect landEffect) {
        this.landEffect = landEffect;
        comboBox.setSelectedItem(landEffect.getDefense());
        spinner.setValue(landEffect.getMoveCost());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftRightSpinnerUI1 = new com.sfc.sf2.core.models.spinner.LeftRightSpinnerUI();
        comboBox = new javax.swing.JComboBox<>();
        spinner = new javax.swing.JSpinner();

        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        spinner.setModel(new javax.swing.SpinnerNumberModel(1, -1, 9, 1));
        spinner.setUI(leftRightSpinnerUI1);
        spinner.setMinimumSize(new java.awt.Dimension(50, 26));
        spinner.setPreferredSize(new java.awt.Dimension(60, 22));
        spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBox)
                .addGap(2, 2, 2)
                .addComponent(spinner, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
        if (landEffect == null) return;
        int oldData = landEffect.getMoveCost();
        int newData = (int)spinner.getValue();
        landEffect.setMoveCost(newData);
        this.firePropertyChange("dataChange", oldData, newData);
    }//GEN-LAST:event_spinnerStateChanged

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
        if (landEffect == null) return;
        String oldData = landEffect.getDefense();
        String newData = (String)comboBox.getSelectedItem();
        landEffect.setDefense(newData);
        this.firePropertyChange("dataChange", oldData, newData);
    }//GEN-LAST:event_comboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private com.sfc.sf2.core.models.spinner.LeftRightSpinnerUI leftRightSpinnerUI1;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
}

/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package com.sfc.sf2.core.gui.controls;

import com.sfc.sf2.helpers.GraphicsHelpers;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.beans.BeanProperty;
import java.util.EventListener;

/**
 *
 * @author TiMMy
 */
public class ColorPicker extends javax.swing.JPanel {

    String colorDialogTitle = "BG Color";
    
    /**
     * Creates new form ColorPicker
     */
    public ColorPicker() {
        initComponents();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        BufferedImage image = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        GraphicsHelpers.drawBackgroundTransparencyPattern(image, getColor(), getWidth()/2);
        g.drawImage(image, 0, 0, this);
    }
    
    public synchronized void addColorChangedListener(ColorChangedListener l) {
        listenerList.add(ColorChangedListener.class, l);
    }

    public synchronized void removeColorChangedListener(ColorChangedListener l) {
        listenerList.remove(ColorChangedListener.class, l);
    }
    
    public String getDialogTitle() {
        return colorDialogTitle;
    }
    
    @BeanProperty(preferred = true, visualUpdate = true, description = "The title to show on the Color Chooser popup.")
    public void setDialogTitle(String colorChooserText) {
        this.colorDialogTitle = colorChooserText;
    }
    
    public Color getColor() {
        return this.getBackground();
    }
    
    @BeanProperty(preferred = true, visualUpdate = true, description = "The default color of the picker.")
    public void setColor(Color color) {
        this.setBackground(color);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser = new javax.swing.JColorChooser();

        setBackground(new java.awt.Color(200, 0, 200));
        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setMinimumSize(new java.awt.Dimension(10, 10));
        setPreferredSize(new java.awt.Dimension(24, 24));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        Color returnCol = jColorChooser.showDialog(this, colorDialogTitle, this.getBackground());
        if (returnCol != null) {
            this.setBackground(returnCol);
            this.repaint();
            fireColorChanged();
        }
    }//GEN-LAST:event_formMouseClicked

    @SuppressWarnings("deprecation")
    protected void fireColorChanged() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        ActionEvent e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "Color Changed", (int)EventQueue.getMostRecentEventTime());
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ColorChangedListener.class) {
                ((ColorChangedListener)listeners[i+1]).colorChanged(e);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser jColorChooser;
    // End of variables declaration//GEN-END:variables
    
    public interface ColorChangedListener extends EventListener {

        /**
         * Invoked when an action occurs.
         * @param e the event to be processed
         */
        public void colorChanged(ActionEvent e);

    }
}

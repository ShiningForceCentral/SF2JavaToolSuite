/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package com.sfc.sf2.core.gui.controls;

import com.sfc.sf2.core.models.AbstractTableModel;
import java.beans.BeanProperty;
import java.beans.PropertyChangeListener;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelListener;

/**
 *
 * @author TiMMy
 * TODO: Can we add some improved interactions? 1) Drag to reorder 2) Deselect by clicking empty space
 */
public class Table extends javax.swing.JPanel {

    private AbstractTableModel tableModel;
    int selectionMode = 1;
    
    /**
     * Creates new form Table
     */
    public Table() {
        super();
        initComponents();
        tableModel = getModel();
        jTable.setSelectionMode(selectionMode);
    }
    
    public AbstractTableModel getModel() {
        return (AbstractTableModel)jTable.getModel();
    }
    
    @BeanProperty(preferred = true, visualUpdate = true, description = "The title to show on the Color Chooser popup.")
    public void setModel(AbstractTableModel model) {
        tableModel = model;
        jTable.setModel(model);
    }
    
    @BeanProperty(enumerationValues = {
            "javax.swing.ListSelectionModel.SINGLE_SELECTION",
            "javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION",
            "javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION"},
            preferred = true, visualUpdate = true, description = "The selection mode used by the row and column selection models.")
    public void setSelectionMode(int mode) {
        selectionMode = mode;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonClone = new javax.swing.JButton();
        jButtonUp = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Table"));
        setMinimumSize(new java.awt.Dimension(260, 260));
        setPreferredSize(new java.awt.Dimension(260, 260));

        jTable.setModel(new com.sfc.sf2.core.models.StringTableModel());
        jScrollPane.setViewportView(jTable);

        jButtonAdd.setText("Add");
        jButtonAdd.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove");
        jButtonRemove.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonClone.setText("Clone");
        jButtonClone.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonClone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloneActionPerformed(evt);
            }
        });

        jButtonUp.setText("/\\");
            jButtonUp.setMargin(new java.awt.Insets(2, 2, 2, 2));
            jButtonUp.setPreferredSize(new java.awt.Dimension(26, 26));
            jButtonUp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonUpActionPerformed(evt);
                }
            });

            jButtonDown.setText("\\/");
            jButtonDown.setMargin(new java.awt.Insets(2, 2, 2, 2));
            jButtonDown.setPreferredSize(new java.awt.Dimension(26, 26));
            jButtonDown.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonDownActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonClone, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAdd)
                            .addComponent(jButtonRemove)
                            .addComponent(jButtonClone)
                            .addComponent(jButtonDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
        }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (tableModel != null && tableModel.canAddMoreRows()) {
            int row = jTable.getSelectedRow()+jTable.getSelectedRowCount()-1;
            tableModel.addRow(row);
            if (row < 0) {
                row = tableModel.getRowCount()-2;
            }
            jTable.setRowSelectionInterval(row+1, row+1);
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        if (tableModel != null) {
            int[] rows = jTable.getSelectedRows();
            for (int i = rows.length-1; i >= 0; i--) {
                tableModel.removeRow(rows[i]);
            }
            if (tableModel.getRowCount() > 0) {
                int row = rows[0];
                if (row >= tableModel.getRowCount()) {
                    row = tableModel.getRowCount()-1;
                }
                jTable.setRowSelectionInterval(row, row);
            }
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonCloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloneActionPerformed
        if (tableModel != null) {
            if (jTable.getSelectedRowCount() > 0) {
                int[] rows = jTable.getSelectedRows();
                for (int i = 0; i < rows.length; i++) {
                    tableModel.cloneRow(rows[i], rows.length);
                }
                //TODO this could be improved to better handle non-contiguous selection (but low-priority)
                jTable.setRowSelectionInterval(rows[0]+rows.length, rows[0]+rows.length+rows.length-1);
            }
        }
    }//GEN-LAST:event_jButtonCloneActionPerformed

    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed
        if (tableModel != null) {
            if (jTable.getSelectedRowCount() > 0 && !jTable.isRowSelected(0)) {
                int[] rows = jTable.getSelectedRows();
                if (tableModel.shiftUp(jTable.getSelectedRow(), rows.length)) {
                    //TODO this could be improved to better handle non-contiguous selection (but low-priority)
                    jTable.setRowSelectionInterval(rows[0]-1, rows[0]-1+rows.length-1);
                }
            }
        }
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed
        if (tableModel != null) {
            if (jTable.getSelectedRowCount() > 0 && !jTable.isRowSelected(jTable.getRowCount()-1)) {
                int[] rows = jTable.getSelectedRows();
                if (tableModel.shiftDown(jTable.getSelectedRow(), rows.length)) {
                    //TODO this could be improved to better handle non-contiguous selection (but low-priority)
                    jTable.setRowSelectionInterval(rows[0]+1, rows[0]+rows.length);
                }
            }
        }
    }//GEN-LAST:event_jButtonDownActionPerformed
        
    public synchronized void addTableModelListener(PropertyChangeListener l) {
        jTable.addPropertyChangeListener(l);
    }

    public synchronized void removeTableModelListener(PropertyChangeListener l) {
        jTable.removePropertyChangeListener(l);
    }
    
    public synchronized void addListSelectionListener(ListSelectionListener l) {
        jTable.getSelectionModel().addListSelectionListener(l);
    }

    public synchronized void removeListSelectionListenerModelListener(ListSelectionListener l) {
        jTable.getSelectionModel().removeListSelectionListener(l);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonClone;
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JScrollPane jScrollPane;
    public javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}

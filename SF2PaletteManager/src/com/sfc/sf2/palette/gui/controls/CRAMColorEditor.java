/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package com.sfc.sf2.palette.gui.controls;

import com.sfc.sf2.palette.CRAMColor;
import com.sfc.sf2.palette.PaletteDecoder;
import com.sfc.sf2.palette.gui.ColorPane;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import java.net.URL;
import java.util.Locale;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSlider;
import javax.swing.KeyStroke;
import javax.swing.UIManager;

/**
 *
 * @author TiMMy
 */
public class CRAMColorEditor extends javax.swing.JPanel {

    ColorPane colorPane;
    CRAMColor color;
    int redIndex, greenIndex, blueIndex;
    
    public CRAMColorEditor() {
        initComponents();
        setColor(CRAMColor.BLACK);
    }
    
    public CRAMColorEditor(CRAMColor initialColor) {
        initComponents();
        setColor(initialColor);
    }
  
    public void setColorPane(ColorPane cp) {
        colorPane = cp;
        setColor(colorPane == null ? CRAMColor.BLACK : colorPane.getCurrentColor());
    }
    
    public CRAMColor getColor() {
        return color;
    }
    
    public void setColor(CRAMColor color) {
        redIndex = PaletteDecoder.brightnessToCramIndex(color.CRAMColor().getRed());
        greenIndex = PaletteDecoder.brightnessToCramIndex(color.CRAMColor().getGreen());
        blueIndex = PaletteDecoder.brightnessToCramIndex(color.CRAMColor().getBlue());
        sliderR.setValue(redIndex);
        sliderG.setValue(greenIndex);
        sliderB.setValue(blueIndex);
        updateColor();
    }
    
    private void updateColor() {
        int r = PaletteDecoder.cramIndexToBrightness(redIndex);
        int g = PaletteDecoder.cramIndexToBrightness(greenIndex);
        int b = PaletteDecoder.cramIndexToBrightness(blueIndex);
        color = CRAMColor.fromPremadeCramColor(r, g, b, 255);
        jPanelColor.setBackground(color.CRAMColor());
        if (colorPane != null)
            colorPane.updateColor(color);
        displayRGBColor();
        jPanelColor.revalidate();
    }

    public void displayRGBColor() {
        int r = PaletteDecoder.cramIndexToBrightness(redIndex);
        int g = PaletteDecoder.cramIndexToBrightness(greenIndex);
        int b = PaletteDecoder.cramIndexToBrightness(blueIndex);
        jLabelRGB.setText(String.format("#%02X%02X%02X", r, g, b));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderR = new javax.swing.JSlider();
        sliderG = new javax.swing.JSlider();
        sliderB = new javax.swing.JSlider();
        jPanelColor = new javax.swing.JPanel();
        jLabelRGB = new javax.swing.JLabel();
        infoButton1 = new com.sfc.sf2.core.gui.controls.InfoButton();

        sliderR.setMajorTickSpacing(2);
        sliderR.setMaximum(14);
        sliderR.setMinorTickSpacing(2);
        sliderR.setPaintLabels(true);
        sliderR.setPaintTicks(true);
        sliderR.setSnapToTicks(true);
        sliderR.setValue(0);
        sliderR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        sliderG.setMajorTickSpacing(2);
        sliderG.setMaximum(14);
        sliderG.setMinorTickSpacing(2);
        sliderG.setPaintLabels(true);
        sliderG.setPaintTicks(true);
        sliderG.setSnapToTicks(true);
        sliderG.setValue(0);
        sliderG.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        sliderB.setMajorTickSpacing(2);
        sliderB.setMaximum(14);
        sliderB.setMinorTickSpacing(2);
        sliderB.setPaintLabels(true);
        sliderB.setPaintTicks(true);
        sliderB.setSnapToTicks(true);
        sliderB.setValue(0);
        sliderB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        jPanelColor.setBackground(new java.awt.Color(0, 0, 0));
        jPanelColor.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout jPanelColorLayout = new javax.swing.GroupLayout(jPanelColor);
        jPanelColor.setLayout(jPanelColorLayout);
        jPanelColorLayout.setHorizontalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelColorLayout.setVerticalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabelRGB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRGB.setText("# FFFFFF");

        infoButton1.setText("");
        infoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelRGB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderB, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sliderG, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderR, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(infoButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sliderB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelRGB)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        JSlider slider = (JSlider)evt.getSource();
        if (slider == sliderR) redIndex = sliderR.getValue();
        if (slider == sliderG) greenIndex = sliderG.getValue();
        if (slider == sliderB) blueIndex = sliderB.getValue();
        updateColor();
    }//GEN-LAST:event_sliderStateChanged

    private void infoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton1ActionPerformed
        Object res = JOptionPane.showOptionDialog(null, "<html><i>\"Why is the color range 0-14?\",<br>\"Why can I only select even numbers?\"</i><br><br>The color-space on the Genesis is limited by the CRAM format.<br>For further information, click the button below.</html>", "Help", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[] { "Close", "<html>Read more on CRAM colors<br>(https://segaretro.org)<html>" }, null);
        if (res == null) return; 
        if ((int)res == 1) {
            try {
                Desktop.getDesktop().browse(new URL("https://segaretro.org/Sega_Mega_Drive/Palettes_and_CRAM").toURI());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_infoButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.sfc.sf2.core.gui.controls.InfoButton infoButton1;
    private javax.swing.JLabel jLabelRGB;
    private javax.swing.JPanel jPanelColor;
    private javax.swing.JSlider sliderB;
    private javax.swing.JSlider sliderG;
    private javax.swing.JSlider sliderR;
    // End of variables declaration//GEN-END:variables

    public static CRAMColor showDialog(Component component, String title, CRAMColor initialColor) throws HeadlessException {

        final CRAMColorEditor pane = new CRAMColorEditor(initialColor != null ? initialColor : CRAMColor.WHITE);
        com.sfc.sf2.palette.gui.controls.ColorTracker ok = new com.sfc.sf2.palette.gui.controls.ColorTracker(pane);
        JDialog dialog = createDialog(component, title, true, pane, ok, null);
        dialog.addComponentListener(new com.sfc.sf2.palette.gui.controls.ColorChooserDialog.DisposeOnClose());
        dialog.setVisible(true);// blocks until user brings dialog down...

        return ok.getColor();
    }
    
    private static JDialog createDialog(Component c, String title, boolean modal, CRAMColorEditor chooserPane, ActionListener okListener, ActionListener cancelListener) throws HeadlessException {

        Window window = JOptionPane.getFrameForComponent(c);
        com.sfc.sf2.palette.gui.controls.ColorChooserDialog dialog;
        if (window instanceof Frame) {
            dialog = new com.sfc.sf2.palette.gui.controls.ColorChooserDialog((Frame)window, title, modal, c, chooserPane, okListener, cancelListener);
        } else {
            dialog = new com.sfc.sf2.palette.gui.controls.ColorChooserDialog((Dialog)window, title, modal, c, chooserPane, okListener, cancelListener);
        }
        dialog.getAccessibleContext().setAccessibleDescription(title);
        return dialog;
    }
}

@SuppressWarnings("serial") // Superclass is not serializable across versions
class ColorChooserDialog extends JDialog {
    private CRAMColor initialColor;
    private CRAMColorEditor chooserPane;
    private JButton cancelButton;

    public ColorChooserDialog(Dialog owner, String title, boolean modal, Component c, CRAMColorEditor chooserPane, ActionListener okListener, ActionListener cancelListener) throws HeadlessException {
        super(owner, title, modal);
        initColorChooserDialog(c, chooserPane, okListener, cancelListener);
    }

    public ColorChooserDialog(Frame owner, String title, boolean modal, Component c, CRAMColorEditor chooserPane, ActionListener okListener, ActionListener cancelListener) throws HeadlessException {
        super(owner, title, modal);
        initColorChooserDialog(c, chooserPane, okListener, cancelListener);
    }

    protected void initColorChooserDialog(Component c, CRAMColorEditor chooserPane, ActionListener okListener, ActionListener cancelListener) {
        setResizable(false);

        this.chooserPane = chooserPane;

        Locale locale = getLocale();
        String okString = "Ok";
        String cancelString = "Cancel";
        String resetString = "Reset";

        Container contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());
        contentPane.add(chooserPane, BorderLayout.CENTER);

        /*
         * Create Lower button panel
         */
        JPanel buttonPane = new JPanel();
        buttonPane.setLayout(new FlowLayout(FlowLayout.CENTER));
        JButton okButton = new JButton(okString);
        getRootPane().setDefaultButton(okButton);
        okButton.getAccessibleContext().setAccessibleDescription(okString);
        okButton.setActionCommand("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        });
        if (okListener != null) {
            okButton.addActionListener(okListener);
        }
        buttonPane.add(okButton);

        cancelButton = new JButton(cancelString);
        cancelButton.getAccessibleContext().setAccessibleDescription(cancelString);

        // The following few lines are used to register esc to close the dialog
        @SuppressWarnings("serial") // anonymous class
        Action cancelKeyAction = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                //((AbstractButton)e.getSource()).fireActionPerformed(e);
            }
        };
        KeyStroke cancelKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        InputMap inputMap = cancelButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = cancelButton.getActionMap();
        if (inputMap != null && actionMap != null) {
            inputMap.put(cancelKeyStroke, "cancel");
            actionMap.put("cancel", cancelKeyAction);
        }
        // end esc handling

        cancelButton.setActionCommand("cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        });
        if (cancelListener != null) {
            cancelButton.addActionListener(cancelListener);
        }
        buttonPane.add(cancelButton);

        JButton resetButton = new JButton(resetString);
        resetButton.getAccessibleContext().setAccessibleDescription(resetString);
        resetButton.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent e) {
               reset();
           }
        });
        /*int mnemonic = sun.swing.SwingUtilities2.getUIDefaultsInt("ColorChooser.resetMnemonic", locale, -1);
        if (mnemonic != -1) {
            resetButton.setMnemonic(mnemonic);
        }*/
        buttonPane.add(resetButton);
        contentPane.add(buttonPane, BorderLayout.SOUTH);

        if (JDialog.isDefaultLookAndFeelDecorated()) {
            boolean supportsWindowDecorations =
            UIManager.getLookAndFeel().getSupportsWindowDecorations();
            if (supportsWindowDecorations) {
                getRootPane().setWindowDecorationStyle(JRootPane.COLOR_CHOOSER_DIALOG);
            }
        }
        applyComponentOrientation(((c == null) ? getRootPane() : c).getComponentOrientation());

        pack();
        setLocationRelativeTo(c);

        this.addWindowListener(new Closer());
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            initialColor = chooserPane.getColor();
        }
        super.setVisible(visible);
    }

    public void reset() {
        chooserPane.setColor(initialColor);
    }

    @SuppressWarnings("serial") // JDK-implementation class
    class Closer extends WindowAdapter implements Serializable{
        public void windowClosing(WindowEvent e) {
            cancelButton.doClick(0);
            Window w = e.getWindow();
            w.setVisible(false);
        }
    }

    @SuppressWarnings("serial") // JDK-implementation class
    static class DisposeOnClose extends ComponentAdapter implements Serializable{
        public void componentHidden(ComponentEvent e) {
            Window w = (Window)e.getComponent();
            w.dispose();
        }
    }

}

class ColorTracker implements ActionListener, Serializable {
    CRAMColorEditor chooser;
    CRAMColor color;

    public ColorTracker(CRAMColorEditor c) {
        chooser = c;
    }

    public void actionPerformed(ActionEvent e) {
        color = chooser.getColor();
    }

    public CRAMColor getColor() {
        return color;
    }
}
